/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: packets.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./discord";
import * as dependency_2 from "./models";
import * as pb_1 from "google-protobuf";
export namespace Packets {
    export class Acknowledgement extends pb_1.Message {
        constructor(data?: any[] | {
            packet_id?: string;
            type?: Acknowledgement.AcknowledgementType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("packet_id" in data && data.packet_id != undefined) {
                    this.packet_id = data.packet_id;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
            }
        }
        get packet_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set packet_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getField(this, 2) as Acknowledgement.AcknowledgementType;
        }
        set type(value: Acknowledgement.AcknowledgementType) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            packet_id?: string;
            type?: Acknowledgement.AcknowledgementType;
        }) {
            const message = new Acknowledgement({});
            if (data.packet_id != null) {
                message.packet_id = data.packet_id;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            return message;
        }
        toObject() {
            const data: {
                packet_id?: string;
                type?: Acknowledgement.AcknowledgementType;
            } = {};
            if (this.packet_id != null) {
                data.packet_id = this.packet_id;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.packet_id === "string" && this.packet_id.length)
                writer.writeString(1, this.packet_id);
            if (this.type !== undefined)
                writer.writeEnum(2, this.type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Acknowledgement {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Acknowledgement();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.packet_id = reader.readString();
                        break;
                    case 2:
                        message.type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Acknowledgement {
            return Acknowledgement.deserialize(bytes);
        }
    }
    export namespace Acknowledgement {
        export enum AcknowledgementType {
            MessageReceived = 0,
            FileDownloaded = 1
        }
    }
    export class Command extends pb_1.Message {
        constructor(data?: any[] | {
            command_type?: Command.CommandTypes;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("command_type" in data && data.command_type != undefined) {
                    this.command_type = data.command_type;
                }
            }
        }
        get command_type() {
            return pb_1.Message.getField(this, 1) as Command.CommandTypes;
        }
        set command_type(value: Command.CommandTypes) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            command_type?: Command.CommandTypes;
        }) {
            const message = new Command({});
            if (data.command_type != null) {
                message.command_type = data.command_type;
            }
            return message;
        }
        toObject() {
            const data: {
                command_type?: Command.CommandTypes;
            } = {};
            if (this.command_type != null) {
                data.command_type = this.command_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.command_type !== undefined)
                writer.writeEnum(1, this.command_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Command {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Command();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.command_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Command {
            return Command.deserialize(bytes);
        }
    }
    export namespace Command {
        export enum CommandTypes {
            Heartbeat = 0,
            ReturnToMenu = 1,
            ScreenOverlay_ShowPng = 2,
            ScreenOverlay_ShowGreen = 3,
            DelayTest_Finish = 4
        }
    }
    export class Connect extends pb_1.Message {
        constructor(data?: any[] | {
            client_type?: Connect.ConnectTypes;
            name?: string;
            password?: string;
            user_id?: string;
            client_version?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("client_type" in data && data.client_type != undefined) {
                    this.client_type = data.client_type;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("client_version" in data && data.client_version != undefined) {
                    this.client_version = data.client_version;
                }
            }
        }
        get client_type() {
            return pb_1.Message.getField(this, 1) as Connect.ConnectTypes;
        }
        set client_type(value: Connect.ConnectTypes) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get password() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get user_id() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get client_version() {
            return pb_1.Message.getField(this, 5) as number;
        }
        set client_version(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            client_type?: Connect.ConnectTypes;
            name?: string;
            password?: string;
            user_id?: string;
            client_version?: number;
        }) {
            const message = new Connect({});
            if (data.client_type != null) {
                message.client_type = data.client_type;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.client_version != null) {
                message.client_version = data.client_version;
            }
            return message;
        }
        toObject() {
            const data: {
                client_type?: Connect.ConnectTypes;
                name?: string;
                password?: string;
                user_id?: string;
                client_version?: number;
            } = {};
            if (this.client_type != null) {
                data.client_type = this.client_type;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.client_version != null) {
                data.client_version = this.client_version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.client_type !== undefined)
                writer.writeEnum(1, this.client_type);
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(2, this.name);
            if (typeof this.password === "string" && this.password.length)
                writer.writeString(3, this.password);
            if (typeof this.user_id === "string" && this.user_id.length)
                writer.writeString(4, this.user_id);
            if (this.client_version !== undefined)
                writer.writeInt32(5, this.client_version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Connect {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Connect();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.client_type = reader.readEnum();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.password = reader.readString();
                        break;
                    case 4:
                        message.user_id = reader.readString();
                        break;
                    case 5:
                        message.client_version = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Connect {
            return Connect.deserialize(bytes);
        }
    }
    export namespace Connect {
        export enum ConnectTypes {
            Player = 0,
            Coordinator = 1,
            TemporaryConnection = 2
        }
    }
    export class Response extends pb_1.Message {
        constructor(data?: any[] | {
            type?: Response.ResponseType;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get type() {
            return pb_1.Message.getField(this, 1) as Response.ResponseType;
        }
        set type(value: Response.ResponseType) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            type?: Response.ResponseType;
            message?: string;
        }) {
            const message = new Response({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: Response.ResponseType;
                message?: string;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type !== undefined)
                writer.writeEnum(1, this.type);
            if (typeof this.message === "string" && this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Response {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Response();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Response {
            return Response.deserialize(bytes);
        }
    }
    export namespace Response {
        export enum ResponseType {
            Fail = 0,
            Success = 1
        }
    }
    export class ConnectResponse extends pb_1.Message {
        constructor(data?: any[] | {
            response?: Response;
            self?: dependency_2.Models.User;
            state?: dependency_2.Models.State;
            server_version?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("response" in data && data.response != undefined) {
                    this.response = data.response;
                }
                if ("self" in data && data.self != undefined) {
                    this.self = data.self;
                }
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
                if ("server_version" in data && data.server_version != undefined) {
                    this.server_version = data.server_version;
                }
            }
        }
        get response() {
            return pb_1.Message.getWrapperField(this, Response, 1) as Response;
        }
        set response(value: Response) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get self() {
            return pb_1.Message.getWrapperField(this, dependency_2.Models.User, 2) as dependency_2.Models.User;
        }
        set self(value: dependency_2.Models.User) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get state() {
            return pb_1.Message.getWrapperField(this, dependency_2.Models.State, 3) as dependency_2.Models.State;
        }
        set state(value: dependency_2.Models.State) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get server_version() {
            return pb_1.Message.getField(this, 4) as number;
        }
        set server_version(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            response?: ReturnType<typeof Response.prototype.toObject>;
            self?: ReturnType<typeof dependency_2.Models.User.prototype.toObject>;
            state?: ReturnType<typeof dependency_2.Models.State.prototype.toObject>;
            server_version?: number;
        }) {
            const message = new ConnectResponse({});
            if (data.response != null) {
                message.response = Response.fromObject(data.response);
            }
            if (data.self != null) {
                message.self = dependency_2.Models.User.fromObject(data.self);
            }
            if (data.state != null) {
                message.state = dependency_2.Models.State.fromObject(data.state);
            }
            if (data.server_version != null) {
                message.server_version = data.server_version;
            }
            return message;
        }
        toObject() {
            const data: {
                response?: ReturnType<typeof Response.prototype.toObject>;
                self?: ReturnType<typeof dependency_2.Models.User.prototype.toObject>;
                state?: ReturnType<typeof dependency_2.Models.State.prototype.toObject>;
                server_version?: number;
            } = {};
            if (this.response != null) {
                data.response = this.response.toObject();
            }
            if (this.self != null) {
                data.self = this.self.toObject();
            }
            if (this.state != null) {
                data.state = this.state.toObject();
            }
            if (this.server_version != null) {
                data.server_version = this.server_version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.response !== undefined)
                writer.writeMessage(1, this.response, () => this.response.serialize(writer));
            if (this.self !== undefined)
                writer.writeMessage(2, this.self, () => this.self.serialize(writer));
            if (this.state !== undefined)
                writer.writeMessage(3, this.state, () => this.state.serialize(writer));
            if (this.server_version !== undefined)
                writer.writeInt32(4, this.server_version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConnectResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConnectResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.response, () => message.response = Response.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.self, () => message.self = dependency_2.Models.User.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.state, () => message.state = dependency_2.Models.State.deserialize(reader));
                        break;
                    case 4:
                        message.server_version = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConnectResponse {
            return ConnectResponse.deserialize(bytes);
        }
    }
    export class File extends pb_1.Message {
        constructor(data?: any[] | {
            file_id?: string;
            intent?: File.Intentions;
            compressed?: boolean;
            data?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("file_id" in data && data.file_id != undefined) {
                    this.file_id = data.file_id;
                }
                if ("intent" in data && data.intent != undefined) {
                    this.intent = data.intent;
                }
                if ("compressed" in data && data.compressed != undefined) {
                    this.compressed = data.compressed;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get file_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set file_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get intent() {
            return pb_1.Message.getField(this, 2) as File.Intentions;
        }
        set intent(value: File.Intentions) {
            pb_1.Message.setField(this, 2, value);
        }
        get compressed() {
            return pb_1.Message.getField(this, 3) as boolean;
        }
        set compressed(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get data() {
            return pb_1.Message.getField(this, 4) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            file_id?: string;
            intent?: File.Intentions;
            compressed?: boolean;
            data?: Uint8Array;
        }) {
            const message = new File({});
            if (data.file_id != null) {
                message.file_id = data.file_id;
            }
            if (data.intent != null) {
                message.intent = data.intent;
            }
            if (data.compressed != null) {
                message.compressed = data.compressed;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                file_id?: string;
                intent?: File.Intentions;
                compressed?: boolean;
                data?: Uint8Array;
            } = {};
            if (this.file_id != null) {
                data.file_id = this.file_id;
            }
            if (this.intent != null) {
                data.intent = this.intent;
            }
            if (this.compressed != null) {
                data.compressed = this.compressed;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.file_id === "string" && this.file_id.length)
                writer.writeString(1, this.file_id);
            if (this.intent !== undefined)
                writer.writeEnum(2, this.intent);
            if (this.compressed !== undefined)
                writer.writeBool(3, this.compressed);
            if (this.data !== undefined)
                writer.writeBytes(4, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): File {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new File();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.file_id = reader.readString();
                        break;
                    case 2:
                        message.intent = reader.readEnum();
                        break;
                    case 3:
                        message.compressed = reader.readBool();
                        break;
                    case 4:
                        message.data = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): File {
            return File.deserialize(bytes);
        }
    }
    export namespace File {
        export enum Intentions {
            None = 0,
            SetPngToShowWhenTriggered = 1,
            ShowPngImmediately = 2
        }
    }
    export class LoadedSong extends pb_1.Message {
        constructor(data?: any[] | {
            level?: dependency_2.Models.PreviewBeatmapLevel;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("level" in data && data.level != undefined) {
                    this.level = data.level;
                }
            }
        }
        get level() {
            return pb_1.Message.getWrapperField(this, dependency_2.Models.PreviewBeatmapLevel, 1) as dependency_2.Models.PreviewBeatmapLevel;
        }
        set level(value: dependency_2.Models.PreviewBeatmapLevel) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            level?: ReturnType<typeof dependency_2.Models.PreviewBeatmapLevel.prototype.toObject>;
        }) {
            const message = new LoadedSong({});
            if (data.level != null) {
                message.level = dependency_2.Models.PreviewBeatmapLevel.fromObject(data.level);
            }
            return message;
        }
        toObject() {
            const data: {
                level?: ReturnType<typeof dependency_2.Models.PreviewBeatmapLevel.prototype.toObject>;
            } = {};
            if (this.level != null) {
                data.level = this.level.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.level !== undefined)
                writer.writeMessage(1, this.level, () => this.level.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoadedSong {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoadedSong();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.level, () => message.level = dependency_2.Models.PreviewBeatmapLevel.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoadedSong {
            return LoadedSong.deserialize(bytes);
        }
    }
    export class Event extends pb_1.Message {
        constructor(data?: any[] | ({} & (({
            player_added_event?: Event.PlayerAddedEvent;
            player_updated_event?: never;
            player_left_event?: never;
            coordinator_added_event?: never;
            coordinator_left_event?: never;
            match_created_event?: never;
            match_updated_event?: never;
            match_deleted_event?: never;
            qualifier_created_event?: never;
            qualifier_updated_event?: never;
            qualifier_deleted_event?: never;
            host_added_event?: never;
            host_deleted_event?: never;
        } | {
            player_added_event?: never;
            player_updated_event?: Event.PlayerUpdatedEvent;
            player_left_event?: never;
            coordinator_added_event?: never;
            coordinator_left_event?: never;
            match_created_event?: never;
            match_updated_event?: never;
            match_deleted_event?: never;
            qualifier_created_event?: never;
            qualifier_updated_event?: never;
            qualifier_deleted_event?: never;
            host_added_event?: never;
            host_deleted_event?: never;
        } | {
            player_added_event?: never;
            player_updated_event?: never;
            player_left_event?: Event.PlayerLeftEvent;
            coordinator_added_event?: never;
            coordinator_left_event?: never;
            match_created_event?: never;
            match_updated_event?: never;
            match_deleted_event?: never;
            qualifier_created_event?: never;
            qualifier_updated_event?: never;
            qualifier_deleted_event?: never;
            host_added_event?: never;
            host_deleted_event?: never;
        } | {
            player_added_event?: never;
            player_updated_event?: never;
            player_left_event?: never;
            coordinator_added_event?: Event.CoordinatorAddedEvent;
            coordinator_left_event?: never;
            match_created_event?: never;
            match_updated_event?: never;
            match_deleted_event?: never;
            qualifier_created_event?: never;
            qualifier_updated_event?: never;
            qualifier_deleted_event?: never;
            host_added_event?: never;
            host_deleted_event?: never;
        } | {
            player_added_event?: never;
            player_updated_event?: never;
            player_left_event?: never;
            coordinator_added_event?: never;
            coordinator_left_event?: Event.CoordinatorLeftEvent;
            match_created_event?: never;
            match_updated_event?: never;
            match_deleted_event?: never;
            qualifier_created_event?: never;
            qualifier_updated_event?: never;
            qualifier_deleted_event?: never;
            host_added_event?: never;
            host_deleted_event?: never;
        } | {
            player_added_event?: never;
            player_updated_event?: never;
            player_left_event?: never;
            coordinator_added_event?: never;
            coordinator_left_event?: never;
            match_created_event?: Event.MatchCreatedEvent;
            match_updated_event?: never;
            match_deleted_event?: never;
            qualifier_created_event?: never;
            qualifier_updated_event?: never;
            qualifier_deleted_event?: never;
            host_added_event?: never;
            host_deleted_event?: never;
        } | {
            player_added_event?: never;
            player_updated_event?: never;
            player_left_event?: never;
            coordinator_added_event?: never;
            coordinator_left_event?: never;
            match_created_event?: never;
            match_updated_event?: Event.MatchUpdatedEvent;
            match_deleted_event?: never;
            qualifier_created_event?: never;
            qualifier_updated_event?: never;
            qualifier_deleted_event?: never;
            host_added_event?: never;
            host_deleted_event?: never;
        } | {
            player_added_event?: never;
            player_updated_event?: never;
            player_left_event?: never;
            coordinator_added_event?: never;
            coordinator_left_event?: never;
            match_created_event?: never;
            match_updated_event?: never;
            match_deleted_event?: Event.MatchDeletedEvent;
            qualifier_created_event?: never;
            qualifier_updated_event?: never;
            qualifier_deleted_event?: never;
            host_added_event?: never;
            host_deleted_event?: never;
        } | {
            player_added_event?: never;
            player_updated_event?: never;
            player_left_event?: never;
            coordinator_added_event?: never;
            coordinator_left_event?: never;
            match_created_event?: never;
            match_updated_event?: never;
            match_deleted_event?: never;
            qualifier_created_event?: Event.QualifierCreatedEvent;
            qualifier_updated_event?: never;
            qualifier_deleted_event?: never;
            host_added_event?: never;
            host_deleted_event?: never;
        } | {
            player_added_event?: never;
            player_updated_event?: never;
            player_left_event?: never;
            coordinator_added_event?: never;
            coordinator_left_event?: never;
            match_created_event?: never;
            match_updated_event?: never;
            match_deleted_event?: never;
            qualifier_created_event?: never;
            qualifier_updated_event?: Event.QualifierUpdatedEvent;
            qualifier_deleted_event?: never;
            host_added_event?: never;
            host_deleted_event?: never;
        } | {
            player_added_event?: never;
            player_updated_event?: never;
            player_left_event?: never;
            coordinator_added_event?: never;
            coordinator_left_event?: never;
            match_created_event?: never;
            match_updated_event?: never;
            match_deleted_event?: never;
            qualifier_created_event?: never;
            qualifier_updated_event?: never;
            qualifier_deleted_event?: Event.QualifierDeletedEvent;
            host_added_event?: never;
            host_deleted_event?: never;
        } | {
            player_added_event?: never;
            player_updated_event?: never;
            player_left_event?: never;
            coordinator_added_event?: never;
            coordinator_left_event?: never;
            match_created_event?: never;
            match_updated_event?: never;
            match_deleted_event?: never;
            qualifier_created_event?: never;
            qualifier_updated_event?: never;
            qualifier_deleted_event?: never;
            host_added_event?: Event.HostAddedEvent;
            host_deleted_event?: never;
        } | {
            player_added_event?: never;
            player_updated_event?: never;
            player_left_event?: never;
            coordinator_added_event?: never;
            coordinator_left_event?: never;
            match_created_event?: never;
            match_updated_event?: never;
            match_deleted_event?: never;
            qualifier_created_event?: never;
            qualifier_updated_event?: never;
            qualifier_deleted_event?: never;
            host_added_event?: never;
            host_deleted_event?: Event.HostDeletedEvent;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]]);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("player_added_event" in data && data.player_added_event != undefined) {
                    this.player_added_event = data.player_added_event;
                }
                if ("player_updated_event" in data && data.player_updated_event != undefined) {
                    this.player_updated_event = data.player_updated_event;
                }
                if ("player_left_event" in data && data.player_left_event != undefined) {
                    this.player_left_event = data.player_left_event;
                }
                if ("coordinator_added_event" in data && data.coordinator_added_event != undefined) {
                    this.coordinator_added_event = data.coordinator_added_event;
                }
                if ("coordinator_left_event" in data && data.coordinator_left_event != undefined) {
                    this.coordinator_left_event = data.coordinator_left_event;
                }
                if ("match_created_event" in data && data.match_created_event != undefined) {
                    this.match_created_event = data.match_created_event;
                }
                if ("match_updated_event" in data && data.match_updated_event != undefined) {
                    this.match_updated_event = data.match_updated_event;
                }
                if ("match_deleted_event" in data && data.match_deleted_event != undefined) {
                    this.match_deleted_event = data.match_deleted_event;
                }
                if ("qualifier_created_event" in data && data.qualifier_created_event != undefined) {
                    this.qualifier_created_event = data.qualifier_created_event;
                }
                if ("qualifier_updated_event" in data && data.qualifier_updated_event != undefined) {
                    this.qualifier_updated_event = data.qualifier_updated_event;
                }
                if ("qualifier_deleted_event" in data && data.qualifier_deleted_event != undefined) {
                    this.qualifier_deleted_event = data.qualifier_deleted_event;
                }
                if ("host_added_event" in data && data.host_added_event != undefined) {
                    this.host_added_event = data.host_added_event;
                }
                if ("host_deleted_event" in data && data.host_deleted_event != undefined) {
                    this.host_deleted_event = data.host_deleted_event;
                }
            }
        }
        get player_added_event() {
            return pb_1.Message.getWrapperField(this, Event.PlayerAddedEvent, 1) as Event.PlayerAddedEvent;
        }
        set player_added_event(value: Event.PlayerAddedEvent) {
            pb_1.Message.setOneofWrapperField(this, 1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], value);
        }
        get player_updated_event() {
            return pb_1.Message.getWrapperField(this, Event.PlayerUpdatedEvent, 2) as Event.PlayerUpdatedEvent;
        }
        set player_updated_event(value: Event.PlayerUpdatedEvent) {
            pb_1.Message.setOneofWrapperField(this, 2, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], value);
        }
        get player_left_event() {
            return pb_1.Message.getWrapperField(this, Event.PlayerLeftEvent, 3) as Event.PlayerLeftEvent;
        }
        set player_left_event(value: Event.PlayerLeftEvent) {
            pb_1.Message.setOneofWrapperField(this, 3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], value);
        }
        get coordinator_added_event() {
            return pb_1.Message.getWrapperField(this, Event.CoordinatorAddedEvent, 4) as Event.CoordinatorAddedEvent;
        }
        set coordinator_added_event(value: Event.CoordinatorAddedEvent) {
            pb_1.Message.setOneofWrapperField(this, 4, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], value);
        }
        get coordinator_left_event() {
            return pb_1.Message.getWrapperField(this, Event.CoordinatorLeftEvent, 5) as Event.CoordinatorLeftEvent;
        }
        set coordinator_left_event(value: Event.CoordinatorLeftEvent) {
            pb_1.Message.setOneofWrapperField(this, 5, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], value);
        }
        get match_created_event() {
            return pb_1.Message.getWrapperField(this, Event.MatchCreatedEvent, 6) as Event.MatchCreatedEvent;
        }
        set match_created_event(value: Event.MatchCreatedEvent) {
            pb_1.Message.setOneofWrapperField(this, 6, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], value);
        }
        get match_updated_event() {
            return pb_1.Message.getWrapperField(this, Event.MatchUpdatedEvent, 7) as Event.MatchUpdatedEvent;
        }
        set match_updated_event(value: Event.MatchUpdatedEvent) {
            pb_1.Message.setOneofWrapperField(this, 7, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], value);
        }
        get match_deleted_event() {
            return pb_1.Message.getWrapperField(this, Event.MatchDeletedEvent, 8) as Event.MatchDeletedEvent;
        }
        set match_deleted_event(value: Event.MatchDeletedEvent) {
            pb_1.Message.setOneofWrapperField(this, 8, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], value);
        }
        get qualifier_created_event() {
            return pb_1.Message.getWrapperField(this, Event.QualifierCreatedEvent, 9) as Event.QualifierCreatedEvent;
        }
        set qualifier_created_event(value: Event.QualifierCreatedEvent) {
            pb_1.Message.setOneofWrapperField(this, 9, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], value);
        }
        get qualifier_updated_event() {
            return pb_1.Message.getWrapperField(this, Event.QualifierUpdatedEvent, 10) as Event.QualifierUpdatedEvent;
        }
        set qualifier_updated_event(value: Event.QualifierUpdatedEvent) {
            pb_1.Message.setOneofWrapperField(this, 10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], value);
        }
        get qualifier_deleted_event() {
            return pb_1.Message.getWrapperField(this, Event.QualifierDeletedEvent, 11) as Event.QualifierDeletedEvent;
        }
        set qualifier_deleted_event(value: Event.QualifierDeletedEvent) {
            pb_1.Message.setOneofWrapperField(this, 11, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], value);
        }
        get host_added_event() {
            return pb_1.Message.getWrapperField(this, Event.HostAddedEvent, 12) as Event.HostAddedEvent;
        }
        set host_added_event(value: Event.HostAddedEvent) {
            pb_1.Message.setOneofWrapperField(this, 12, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], value);
        }
        get host_deleted_event() {
            return pb_1.Message.getWrapperField(this, Event.HostDeletedEvent, 13) as Event.HostDeletedEvent;
        }
        set host_deleted_event(value: Event.HostDeletedEvent) {
            pb_1.Message.setOneofWrapperField(this, 13, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], value);
        }
        get changed_object() {
            const cases: {
                [index: number]: "none" | "player_added_event" | "player_updated_event" | "player_left_event" | "coordinator_added_event" | "coordinator_left_event" | "match_created_event" | "match_updated_event" | "match_deleted_event" | "qualifier_created_event" | "qualifier_updated_event" | "qualifier_deleted_event" | "host_added_event" | "host_deleted_event";
            } = {
                0: "none",
                1: "player_added_event",
                2: "player_updated_event",
                3: "player_left_event",
                4: "coordinator_added_event",
                5: "coordinator_left_event",
                6: "match_created_event",
                7: "match_updated_event",
                8: "match_deleted_event",
                9: "qualifier_created_event",
                10: "qualifier_updated_event",
                11: "qualifier_deleted_event",
                12: "host_added_event",
                13: "host_deleted_event"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])];
        }
        static fromObject(data: {
            player_added_event?: ReturnType<typeof Event.PlayerAddedEvent.prototype.toObject>;
            player_updated_event?: ReturnType<typeof Event.PlayerUpdatedEvent.prototype.toObject>;
            player_left_event?: ReturnType<typeof Event.PlayerLeftEvent.prototype.toObject>;
            coordinator_added_event?: ReturnType<typeof Event.CoordinatorAddedEvent.prototype.toObject>;
            coordinator_left_event?: ReturnType<typeof Event.CoordinatorLeftEvent.prototype.toObject>;
            match_created_event?: ReturnType<typeof Event.MatchCreatedEvent.prototype.toObject>;
            match_updated_event?: ReturnType<typeof Event.MatchUpdatedEvent.prototype.toObject>;
            match_deleted_event?: ReturnType<typeof Event.MatchDeletedEvent.prototype.toObject>;
            qualifier_created_event?: ReturnType<typeof Event.QualifierCreatedEvent.prototype.toObject>;
            qualifier_updated_event?: ReturnType<typeof Event.QualifierUpdatedEvent.prototype.toObject>;
            qualifier_deleted_event?: ReturnType<typeof Event.QualifierDeletedEvent.prototype.toObject>;
            host_added_event?: ReturnType<typeof Event.HostAddedEvent.prototype.toObject>;
            host_deleted_event?: ReturnType<typeof Event.HostDeletedEvent.prototype.toObject>;
        }) {
            const message = new Event({});
            if (data.player_added_event != null) {
                message.player_added_event = Event.PlayerAddedEvent.fromObject(data.player_added_event);
            }
            if (data.player_updated_event != null) {
                message.player_updated_event = Event.PlayerUpdatedEvent.fromObject(data.player_updated_event);
            }
            if (data.player_left_event != null) {
                message.player_left_event = Event.PlayerLeftEvent.fromObject(data.player_left_event);
            }
            if (data.coordinator_added_event != null) {
                message.coordinator_added_event = Event.CoordinatorAddedEvent.fromObject(data.coordinator_added_event);
            }
            if (data.coordinator_left_event != null) {
                message.coordinator_left_event = Event.CoordinatorLeftEvent.fromObject(data.coordinator_left_event);
            }
            if (data.match_created_event != null) {
                message.match_created_event = Event.MatchCreatedEvent.fromObject(data.match_created_event);
            }
            if (data.match_updated_event != null) {
                message.match_updated_event = Event.MatchUpdatedEvent.fromObject(data.match_updated_event);
            }
            if (data.match_deleted_event != null) {
                message.match_deleted_event = Event.MatchDeletedEvent.fromObject(data.match_deleted_event);
            }
            if (data.qualifier_created_event != null) {
                message.qualifier_created_event = Event.QualifierCreatedEvent.fromObject(data.qualifier_created_event);
            }
            if (data.qualifier_updated_event != null) {
                message.qualifier_updated_event = Event.QualifierUpdatedEvent.fromObject(data.qualifier_updated_event);
            }
            if (data.qualifier_deleted_event != null) {
                message.qualifier_deleted_event = Event.QualifierDeletedEvent.fromObject(data.qualifier_deleted_event);
            }
            if (data.host_added_event != null) {
                message.host_added_event = Event.HostAddedEvent.fromObject(data.host_added_event);
            }
            if (data.host_deleted_event != null) {
                message.host_deleted_event = Event.HostDeletedEvent.fromObject(data.host_deleted_event);
            }
            return message;
        }
        toObject() {
            const data: {
                player_added_event?: ReturnType<typeof Event.PlayerAddedEvent.prototype.toObject>;
                player_updated_event?: ReturnType<typeof Event.PlayerUpdatedEvent.prototype.toObject>;
                player_left_event?: ReturnType<typeof Event.PlayerLeftEvent.prototype.toObject>;
                coordinator_added_event?: ReturnType<typeof Event.CoordinatorAddedEvent.prototype.toObject>;
                coordinator_left_event?: ReturnType<typeof Event.CoordinatorLeftEvent.prototype.toObject>;
                match_created_event?: ReturnType<typeof Event.MatchCreatedEvent.prototype.toObject>;
                match_updated_event?: ReturnType<typeof Event.MatchUpdatedEvent.prototype.toObject>;
                match_deleted_event?: ReturnType<typeof Event.MatchDeletedEvent.prototype.toObject>;
                qualifier_created_event?: ReturnType<typeof Event.QualifierCreatedEvent.prototype.toObject>;
                qualifier_updated_event?: ReturnType<typeof Event.QualifierUpdatedEvent.prototype.toObject>;
                qualifier_deleted_event?: ReturnType<typeof Event.QualifierDeletedEvent.prototype.toObject>;
                host_added_event?: ReturnType<typeof Event.HostAddedEvent.prototype.toObject>;
                host_deleted_event?: ReturnType<typeof Event.HostDeletedEvent.prototype.toObject>;
            } = {};
            if (this.player_added_event != null) {
                data.player_added_event = this.player_added_event.toObject();
            }
            if (this.player_updated_event != null) {
                data.player_updated_event = this.player_updated_event.toObject();
            }
            if (this.player_left_event != null) {
                data.player_left_event = this.player_left_event.toObject();
            }
            if (this.coordinator_added_event != null) {
                data.coordinator_added_event = this.coordinator_added_event.toObject();
            }
            if (this.coordinator_left_event != null) {
                data.coordinator_left_event = this.coordinator_left_event.toObject();
            }
            if (this.match_created_event != null) {
                data.match_created_event = this.match_created_event.toObject();
            }
            if (this.match_updated_event != null) {
                data.match_updated_event = this.match_updated_event.toObject();
            }
            if (this.match_deleted_event != null) {
                data.match_deleted_event = this.match_deleted_event.toObject();
            }
            if (this.qualifier_created_event != null) {
                data.qualifier_created_event = this.qualifier_created_event.toObject();
            }
            if (this.qualifier_updated_event != null) {
                data.qualifier_updated_event = this.qualifier_updated_event.toObject();
            }
            if (this.qualifier_deleted_event != null) {
                data.qualifier_deleted_event = this.qualifier_deleted_event.toObject();
            }
            if (this.host_added_event != null) {
                data.host_added_event = this.host_added_event.toObject();
            }
            if (this.host_deleted_event != null) {
                data.host_deleted_event = this.host_deleted_event.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.player_added_event !== undefined)
                writer.writeMessage(1, this.player_added_event, () => this.player_added_event.serialize(writer));
            if (this.player_updated_event !== undefined)
                writer.writeMessage(2, this.player_updated_event, () => this.player_updated_event.serialize(writer));
            if (this.player_left_event !== undefined)
                writer.writeMessage(3, this.player_left_event, () => this.player_left_event.serialize(writer));
            if (this.coordinator_added_event !== undefined)
                writer.writeMessage(4, this.coordinator_added_event, () => this.coordinator_added_event.serialize(writer));
            if (this.coordinator_left_event !== undefined)
                writer.writeMessage(5, this.coordinator_left_event, () => this.coordinator_left_event.serialize(writer));
            if (this.match_created_event !== undefined)
                writer.writeMessage(6, this.match_created_event, () => this.match_created_event.serialize(writer));
            if (this.match_updated_event !== undefined)
                writer.writeMessage(7, this.match_updated_event, () => this.match_updated_event.serialize(writer));
            if (this.match_deleted_event !== undefined)
                writer.writeMessage(8, this.match_deleted_event, () => this.match_deleted_event.serialize(writer));
            if (this.qualifier_created_event !== undefined)
                writer.writeMessage(9, this.qualifier_created_event, () => this.qualifier_created_event.serialize(writer));
            if (this.qualifier_updated_event !== undefined)
                writer.writeMessage(10, this.qualifier_updated_event, () => this.qualifier_updated_event.serialize(writer));
            if (this.qualifier_deleted_event !== undefined)
                writer.writeMessage(11, this.qualifier_deleted_event, () => this.qualifier_deleted_event.serialize(writer));
            if (this.host_added_event !== undefined)
                writer.writeMessage(12, this.host_added_event, () => this.host_added_event.serialize(writer));
            if (this.host_deleted_event !== undefined)
                writer.writeMessage(13, this.host_deleted_event, () => this.host_deleted_event.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Event {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Event();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.player_added_event, () => message.player_added_event = Event.PlayerAddedEvent.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.player_updated_event, () => message.player_updated_event = Event.PlayerUpdatedEvent.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.player_left_event, () => message.player_left_event = Event.PlayerLeftEvent.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.coordinator_added_event, () => message.coordinator_added_event = Event.CoordinatorAddedEvent.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.coordinator_left_event, () => message.coordinator_left_event = Event.CoordinatorLeftEvent.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.match_created_event, () => message.match_created_event = Event.MatchCreatedEvent.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.match_updated_event, () => message.match_updated_event = Event.MatchUpdatedEvent.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.match_deleted_event, () => message.match_deleted_event = Event.MatchDeletedEvent.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.qualifier_created_event, () => message.qualifier_created_event = Event.QualifierCreatedEvent.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.qualifier_updated_event, () => message.qualifier_updated_event = Event.QualifierUpdatedEvent.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.qualifier_deleted_event, () => message.qualifier_deleted_event = Event.QualifierDeletedEvent.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.host_added_event, () => message.host_added_event = Event.HostAddedEvent.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.host_deleted_event, () => message.host_deleted_event = Event.HostDeletedEvent.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Event {
            return Event.deserialize(bytes);
        }
    }
    export namespace Event {
        export class PlayerAddedEvent extends pb_1.Message {
            constructor(data?: any[] | {
                player?: dependency_2.Models.Player;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("player" in data && data.player != undefined) {
                        this.player = data.player;
                    }
                }
            }
            get player() {
                return pb_1.Message.getWrapperField(this, dependency_2.Models.Player, 1) as dependency_2.Models.Player;
            }
            set player(value: dependency_2.Models.Player) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            static fromObject(data: {
                player?: ReturnType<typeof dependency_2.Models.Player.prototype.toObject>;
            }) {
                const message = new PlayerAddedEvent({});
                if (data.player != null) {
                    message.player = dependency_2.Models.Player.fromObject(data.player);
                }
                return message;
            }
            toObject() {
                const data: {
                    player?: ReturnType<typeof dependency_2.Models.Player.prototype.toObject>;
                } = {};
                if (this.player != null) {
                    data.player = this.player.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.player !== undefined)
                    writer.writeMessage(1, this.player, () => this.player.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerAddedEvent {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerAddedEvent();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.player, () => message.player = dependency_2.Models.Player.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): PlayerAddedEvent {
                return PlayerAddedEvent.deserialize(bytes);
            }
        }
        export class PlayerUpdatedEvent extends pb_1.Message {
            constructor(data?: any[] | {
                player?: dependency_2.Models.Player;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("player" in data && data.player != undefined) {
                        this.player = data.player;
                    }
                }
            }
            get player() {
                return pb_1.Message.getWrapperField(this, dependency_2.Models.Player, 1) as dependency_2.Models.Player;
            }
            set player(value: dependency_2.Models.Player) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            static fromObject(data: {
                player?: ReturnType<typeof dependency_2.Models.Player.prototype.toObject>;
            }) {
                const message = new PlayerUpdatedEvent({});
                if (data.player != null) {
                    message.player = dependency_2.Models.Player.fromObject(data.player);
                }
                return message;
            }
            toObject() {
                const data: {
                    player?: ReturnType<typeof dependency_2.Models.Player.prototype.toObject>;
                } = {};
                if (this.player != null) {
                    data.player = this.player.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.player !== undefined)
                    writer.writeMessage(1, this.player, () => this.player.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerUpdatedEvent {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerUpdatedEvent();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.player, () => message.player = dependency_2.Models.Player.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): PlayerUpdatedEvent {
                return PlayerUpdatedEvent.deserialize(bytes);
            }
        }
        export class PlayerLeftEvent extends pb_1.Message {
            constructor(data?: any[] | {
                player?: dependency_2.Models.Player;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("player" in data && data.player != undefined) {
                        this.player = data.player;
                    }
                }
            }
            get player() {
                return pb_1.Message.getWrapperField(this, dependency_2.Models.Player, 1) as dependency_2.Models.Player;
            }
            set player(value: dependency_2.Models.Player) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            static fromObject(data: {
                player?: ReturnType<typeof dependency_2.Models.Player.prototype.toObject>;
            }) {
                const message = new PlayerLeftEvent({});
                if (data.player != null) {
                    message.player = dependency_2.Models.Player.fromObject(data.player);
                }
                return message;
            }
            toObject() {
                const data: {
                    player?: ReturnType<typeof dependency_2.Models.Player.prototype.toObject>;
                } = {};
                if (this.player != null) {
                    data.player = this.player.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.player !== undefined)
                    writer.writeMessage(1, this.player, () => this.player.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerLeftEvent {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerLeftEvent();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.player, () => message.player = dependency_2.Models.Player.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): PlayerLeftEvent {
                return PlayerLeftEvent.deserialize(bytes);
            }
        }
        export class CoordinatorAddedEvent extends pb_1.Message {
            constructor(data?: any[] | {
                coordinator?: dependency_2.Models.Coordinator;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("coordinator" in data && data.coordinator != undefined) {
                        this.coordinator = data.coordinator;
                    }
                }
            }
            get coordinator() {
                return pb_1.Message.getWrapperField(this, dependency_2.Models.Coordinator, 1) as dependency_2.Models.Coordinator;
            }
            set coordinator(value: dependency_2.Models.Coordinator) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            static fromObject(data: {
                coordinator?: ReturnType<typeof dependency_2.Models.Coordinator.prototype.toObject>;
            }) {
                const message = new CoordinatorAddedEvent({});
                if (data.coordinator != null) {
                    message.coordinator = dependency_2.Models.Coordinator.fromObject(data.coordinator);
                }
                return message;
            }
            toObject() {
                const data: {
                    coordinator?: ReturnType<typeof dependency_2.Models.Coordinator.prototype.toObject>;
                } = {};
                if (this.coordinator != null) {
                    data.coordinator = this.coordinator.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.coordinator !== undefined)
                    writer.writeMessage(1, this.coordinator, () => this.coordinator.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CoordinatorAddedEvent {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CoordinatorAddedEvent();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.coordinator, () => message.coordinator = dependency_2.Models.Coordinator.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): CoordinatorAddedEvent {
                return CoordinatorAddedEvent.deserialize(bytes);
            }
        }
        export class CoordinatorLeftEvent extends pb_1.Message {
            constructor(data?: any[] | {
                coordinator?: dependency_2.Models.Coordinator;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("coordinator" in data && data.coordinator != undefined) {
                        this.coordinator = data.coordinator;
                    }
                }
            }
            get coordinator() {
                return pb_1.Message.getWrapperField(this, dependency_2.Models.Coordinator, 1) as dependency_2.Models.Coordinator;
            }
            set coordinator(value: dependency_2.Models.Coordinator) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            static fromObject(data: {
                coordinator?: ReturnType<typeof dependency_2.Models.Coordinator.prototype.toObject>;
            }) {
                const message = new CoordinatorLeftEvent({});
                if (data.coordinator != null) {
                    message.coordinator = dependency_2.Models.Coordinator.fromObject(data.coordinator);
                }
                return message;
            }
            toObject() {
                const data: {
                    coordinator?: ReturnType<typeof dependency_2.Models.Coordinator.prototype.toObject>;
                } = {};
                if (this.coordinator != null) {
                    data.coordinator = this.coordinator.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.coordinator !== undefined)
                    writer.writeMessage(1, this.coordinator, () => this.coordinator.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CoordinatorLeftEvent {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CoordinatorLeftEvent();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.coordinator, () => message.coordinator = dependency_2.Models.Coordinator.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): CoordinatorLeftEvent {
                return CoordinatorLeftEvent.deserialize(bytes);
            }
        }
        export class MatchCreatedEvent extends pb_1.Message {
            constructor(data?: any[] | {
                match?: dependency_2.Models.Match;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("match" in data && data.match != undefined) {
                        this.match = data.match;
                    }
                }
            }
            get match() {
                return pb_1.Message.getWrapperField(this, dependency_2.Models.Match, 1) as dependency_2.Models.Match;
            }
            set match(value: dependency_2.Models.Match) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            static fromObject(data: {
                match?: ReturnType<typeof dependency_2.Models.Match.prototype.toObject>;
            }) {
                const message = new MatchCreatedEvent({});
                if (data.match != null) {
                    message.match = dependency_2.Models.Match.fromObject(data.match);
                }
                return message;
            }
            toObject() {
                const data: {
                    match?: ReturnType<typeof dependency_2.Models.Match.prototype.toObject>;
                } = {};
                if (this.match != null) {
                    data.match = this.match.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.match !== undefined)
                    writer.writeMessage(1, this.match, () => this.match.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MatchCreatedEvent {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MatchCreatedEvent();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.match, () => message.match = dependency_2.Models.Match.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): MatchCreatedEvent {
                return MatchCreatedEvent.deserialize(bytes);
            }
        }
        export class MatchUpdatedEvent extends pb_1.Message {
            constructor(data?: any[] | {
                match?: dependency_2.Models.Match;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("match" in data && data.match != undefined) {
                        this.match = data.match;
                    }
                }
            }
            get match() {
                return pb_1.Message.getWrapperField(this, dependency_2.Models.Match, 1) as dependency_2.Models.Match;
            }
            set match(value: dependency_2.Models.Match) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            static fromObject(data: {
                match?: ReturnType<typeof dependency_2.Models.Match.prototype.toObject>;
            }) {
                const message = new MatchUpdatedEvent({});
                if (data.match != null) {
                    message.match = dependency_2.Models.Match.fromObject(data.match);
                }
                return message;
            }
            toObject() {
                const data: {
                    match?: ReturnType<typeof dependency_2.Models.Match.prototype.toObject>;
                } = {};
                if (this.match != null) {
                    data.match = this.match.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.match !== undefined)
                    writer.writeMessage(1, this.match, () => this.match.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MatchUpdatedEvent {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MatchUpdatedEvent();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.match, () => message.match = dependency_2.Models.Match.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): MatchUpdatedEvent {
                return MatchUpdatedEvent.deserialize(bytes);
            }
        }
        export class MatchDeletedEvent extends pb_1.Message {
            constructor(data?: any[] | {
                match?: dependency_2.Models.Match;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("match" in data && data.match != undefined) {
                        this.match = data.match;
                    }
                }
            }
            get match() {
                return pb_1.Message.getWrapperField(this, dependency_2.Models.Match, 1) as dependency_2.Models.Match;
            }
            set match(value: dependency_2.Models.Match) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            static fromObject(data: {
                match?: ReturnType<typeof dependency_2.Models.Match.prototype.toObject>;
            }) {
                const message = new MatchDeletedEvent({});
                if (data.match != null) {
                    message.match = dependency_2.Models.Match.fromObject(data.match);
                }
                return message;
            }
            toObject() {
                const data: {
                    match?: ReturnType<typeof dependency_2.Models.Match.prototype.toObject>;
                } = {};
                if (this.match != null) {
                    data.match = this.match.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.match !== undefined)
                    writer.writeMessage(1, this.match, () => this.match.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MatchDeletedEvent {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MatchDeletedEvent();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.match, () => message.match = dependency_2.Models.Match.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): MatchDeletedEvent {
                return MatchDeletedEvent.deserialize(bytes);
            }
        }
        export class QualifierCreatedEvent extends pb_1.Message {
            constructor(data?: any[] | {
                event?: dependency_2.Models.QualifierEvent;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("event" in data && data.event != undefined) {
                        this.event = data.event;
                    }
                }
            }
            get event() {
                return pb_1.Message.getWrapperField(this, dependency_2.Models.QualifierEvent, 1) as dependency_2.Models.QualifierEvent;
            }
            set event(value: dependency_2.Models.QualifierEvent) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            static fromObject(data: {
                event?: ReturnType<typeof dependency_2.Models.QualifierEvent.prototype.toObject>;
            }) {
                const message = new QualifierCreatedEvent({});
                if (data.event != null) {
                    message.event = dependency_2.Models.QualifierEvent.fromObject(data.event);
                }
                return message;
            }
            toObject() {
                const data: {
                    event?: ReturnType<typeof dependency_2.Models.QualifierEvent.prototype.toObject>;
                } = {};
                if (this.event != null) {
                    data.event = this.event.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.event !== undefined)
                    writer.writeMessage(1, this.event, () => this.event.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QualifierCreatedEvent {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QualifierCreatedEvent();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.event, () => message.event = dependency_2.Models.QualifierEvent.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): QualifierCreatedEvent {
                return QualifierCreatedEvent.deserialize(bytes);
            }
        }
        export class QualifierUpdatedEvent extends pb_1.Message {
            constructor(data?: any[] | {
                event?: dependency_2.Models.QualifierEvent;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("event" in data && data.event != undefined) {
                        this.event = data.event;
                    }
                }
            }
            get event() {
                return pb_1.Message.getWrapperField(this, dependency_2.Models.QualifierEvent, 1) as dependency_2.Models.QualifierEvent;
            }
            set event(value: dependency_2.Models.QualifierEvent) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            static fromObject(data: {
                event?: ReturnType<typeof dependency_2.Models.QualifierEvent.prototype.toObject>;
            }) {
                const message = new QualifierUpdatedEvent({});
                if (data.event != null) {
                    message.event = dependency_2.Models.QualifierEvent.fromObject(data.event);
                }
                return message;
            }
            toObject() {
                const data: {
                    event?: ReturnType<typeof dependency_2.Models.QualifierEvent.prototype.toObject>;
                } = {};
                if (this.event != null) {
                    data.event = this.event.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.event !== undefined)
                    writer.writeMessage(1, this.event, () => this.event.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QualifierUpdatedEvent {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QualifierUpdatedEvent();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.event, () => message.event = dependency_2.Models.QualifierEvent.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): QualifierUpdatedEvent {
                return QualifierUpdatedEvent.deserialize(bytes);
            }
        }
        export class QualifierDeletedEvent extends pb_1.Message {
            constructor(data?: any[] | {
                event?: dependency_2.Models.QualifierEvent;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("event" in data && data.event != undefined) {
                        this.event = data.event;
                    }
                }
            }
            get event() {
                return pb_1.Message.getWrapperField(this, dependency_2.Models.QualifierEvent, 1) as dependency_2.Models.QualifierEvent;
            }
            set event(value: dependency_2.Models.QualifierEvent) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            static fromObject(data: {
                event?: ReturnType<typeof dependency_2.Models.QualifierEvent.prototype.toObject>;
            }) {
                const message = new QualifierDeletedEvent({});
                if (data.event != null) {
                    message.event = dependency_2.Models.QualifierEvent.fromObject(data.event);
                }
                return message;
            }
            toObject() {
                const data: {
                    event?: ReturnType<typeof dependency_2.Models.QualifierEvent.prototype.toObject>;
                } = {};
                if (this.event != null) {
                    data.event = this.event.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.event !== undefined)
                    writer.writeMessage(1, this.event, () => this.event.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QualifierDeletedEvent {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QualifierDeletedEvent();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.event, () => message.event = dependency_2.Models.QualifierEvent.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): QualifierDeletedEvent {
                return QualifierDeletedEvent.deserialize(bytes);
            }
        }
        export class HostAddedEvent extends pb_1.Message {
            constructor(data?: any[] | {
                server?: dependency_2.Models.CoreServer;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("server" in data && data.server != undefined) {
                        this.server = data.server;
                    }
                }
            }
            get server() {
                return pb_1.Message.getWrapperField(this, dependency_2.Models.CoreServer, 1) as dependency_2.Models.CoreServer;
            }
            set server(value: dependency_2.Models.CoreServer) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            static fromObject(data: {
                server?: ReturnType<typeof dependency_2.Models.CoreServer.prototype.toObject>;
            }) {
                const message = new HostAddedEvent({});
                if (data.server != null) {
                    message.server = dependency_2.Models.CoreServer.fromObject(data.server);
                }
                return message;
            }
            toObject() {
                const data: {
                    server?: ReturnType<typeof dependency_2.Models.CoreServer.prototype.toObject>;
                } = {};
                if (this.server != null) {
                    data.server = this.server.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.server !== undefined)
                    writer.writeMessage(1, this.server, () => this.server.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HostAddedEvent {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HostAddedEvent();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.server, () => message.server = dependency_2.Models.CoreServer.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): HostAddedEvent {
                return HostAddedEvent.deserialize(bytes);
            }
        }
        export class HostDeletedEvent extends pb_1.Message {
            constructor(data?: any[] | {
                server?: dependency_2.Models.CoreServer;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("server" in data && data.server != undefined) {
                        this.server = data.server;
                    }
                }
            }
            get server() {
                return pb_1.Message.getWrapperField(this, dependency_2.Models.CoreServer, 1) as dependency_2.Models.CoreServer;
            }
            set server(value: dependency_2.Models.CoreServer) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            static fromObject(data: {
                server?: ReturnType<typeof dependency_2.Models.CoreServer.prototype.toObject>;
            }) {
                const message = new HostDeletedEvent({});
                if (data.server != null) {
                    message.server = dependency_2.Models.CoreServer.fromObject(data.server);
                }
                return message;
            }
            toObject() {
                const data: {
                    server?: ReturnType<typeof dependency_2.Models.CoreServer.prototype.toObject>;
                } = {};
                if (this.server != null) {
                    data.server = this.server.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.server !== undefined)
                    writer.writeMessage(1, this.server, () => this.server.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HostDeletedEvent {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HostDeletedEvent();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.server, () => message.server = dependency_2.Models.CoreServer.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): HostDeletedEvent {
                return HostDeletedEvent.deserialize(bytes);
            }
        }
    }
    export class LoadSong extends pb_1.Message {
        constructor(data?: any[] | {
            level_id?: string;
            custom_host_url?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("level_id" in data && data.level_id != undefined) {
                    this.level_id = data.level_id;
                }
                if ("custom_host_url" in data && data.custom_host_url != undefined) {
                    this.custom_host_url = data.custom_host_url;
                }
            }
        }
        get level_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set level_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get custom_host_url() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set custom_host_url(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            level_id?: string;
            custom_host_url?: string;
        }) {
            const message = new LoadSong({});
            if (data.level_id != null) {
                message.level_id = data.level_id;
            }
            if (data.custom_host_url != null) {
                message.custom_host_url = data.custom_host_url;
            }
            return message;
        }
        toObject() {
            const data: {
                level_id?: string;
                custom_host_url?: string;
            } = {};
            if (this.level_id != null) {
                data.level_id = this.level_id;
            }
            if (this.custom_host_url != null) {
                data.custom_host_url = this.custom_host_url;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.level_id === "string" && this.level_id.length)
                writer.writeString(1, this.level_id);
            if (typeof this.custom_host_url === "string" && this.custom_host_url.length)
                writer.writeString(2, this.custom_host_url);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoadSong {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoadSong();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.level_id = reader.readString();
                        break;
                    case 2:
                        message.custom_host_url = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoadSong {
            return LoadSong.deserialize(bytes);
        }
    }
    export class PlaySong extends pb_1.Message {
        constructor(data?: any[] | {
            gameplay_parameters?: dependency_2.Models.GameplayParameters;
            floating_scoreboard?: boolean;
            stream_sync?: boolean;
            disable_fail?: boolean;
            disable_pause?: boolean;
            disable_scoresaber_submission?: boolean;
            show_normal_notes_on_stream?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("gameplay_parameters" in data && data.gameplay_parameters != undefined) {
                    this.gameplay_parameters = data.gameplay_parameters;
                }
                if ("floating_scoreboard" in data && data.floating_scoreboard != undefined) {
                    this.floating_scoreboard = data.floating_scoreboard;
                }
                if ("stream_sync" in data && data.stream_sync != undefined) {
                    this.stream_sync = data.stream_sync;
                }
                if ("disable_fail" in data && data.disable_fail != undefined) {
                    this.disable_fail = data.disable_fail;
                }
                if ("disable_pause" in data && data.disable_pause != undefined) {
                    this.disable_pause = data.disable_pause;
                }
                if ("disable_scoresaber_submission" in data && data.disable_scoresaber_submission != undefined) {
                    this.disable_scoresaber_submission = data.disable_scoresaber_submission;
                }
                if ("show_normal_notes_on_stream" in data && data.show_normal_notes_on_stream != undefined) {
                    this.show_normal_notes_on_stream = data.show_normal_notes_on_stream;
                }
            }
        }
        get gameplay_parameters() {
            return pb_1.Message.getWrapperField(this, dependency_2.Models.GameplayParameters, 1) as dependency_2.Models.GameplayParameters;
        }
        set gameplay_parameters(value: dependency_2.Models.GameplayParameters) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get floating_scoreboard() {
            return pb_1.Message.getField(this, 3) as boolean;
        }
        set floating_scoreboard(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get stream_sync() {
            return pb_1.Message.getField(this, 4) as boolean;
        }
        set stream_sync(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get disable_fail() {
            return pb_1.Message.getField(this, 5) as boolean;
        }
        set disable_fail(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get disable_pause() {
            return pb_1.Message.getField(this, 6) as boolean;
        }
        set disable_pause(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get disable_scoresaber_submission() {
            return pb_1.Message.getField(this, 7) as boolean;
        }
        set disable_scoresaber_submission(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get show_normal_notes_on_stream() {
            return pb_1.Message.getField(this, 8) as boolean;
        }
        set show_normal_notes_on_stream(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            gameplay_parameters?: ReturnType<typeof dependency_2.Models.GameplayParameters.prototype.toObject>;
            floating_scoreboard?: boolean;
            stream_sync?: boolean;
            disable_fail?: boolean;
            disable_pause?: boolean;
            disable_scoresaber_submission?: boolean;
            show_normal_notes_on_stream?: boolean;
        }) {
            const message = new PlaySong({});
            if (data.gameplay_parameters != null) {
                message.gameplay_parameters = dependency_2.Models.GameplayParameters.fromObject(data.gameplay_parameters);
            }
            if (data.floating_scoreboard != null) {
                message.floating_scoreboard = data.floating_scoreboard;
            }
            if (data.stream_sync != null) {
                message.stream_sync = data.stream_sync;
            }
            if (data.disable_fail != null) {
                message.disable_fail = data.disable_fail;
            }
            if (data.disable_pause != null) {
                message.disable_pause = data.disable_pause;
            }
            if (data.disable_scoresaber_submission != null) {
                message.disable_scoresaber_submission = data.disable_scoresaber_submission;
            }
            if (data.show_normal_notes_on_stream != null) {
                message.show_normal_notes_on_stream = data.show_normal_notes_on_stream;
            }
            return message;
        }
        toObject() {
            const data: {
                gameplay_parameters?: ReturnType<typeof dependency_2.Models.GameplayParameters.prototype.toObject>;
                floating_scoreboard?: boolean;
                stream_sync?: boolean;
                disable_fail?: boolean;
                disable_pause?: boolean;
                disable_scoresaber_submission?: boolean;
                show_normal_notes_on_stream?: boolean;
            } = {};
            if (this.gameplay_parameters != null) {
                data.gameplay_parameters = this.gameplay_parameters.toObject();
            }
            if (this.floating_scoreboard != null) {
                data.floating_scoreboard = this.floating_scoreboard;
            }
            if (this.stream_sync != null) {
                data.stream_sync = this.stream_sync;
            }
            if (this.disable_fail != null) {
                data.disable_fail = this.disable_fail;
            }
            if (this.disable_pause != null) {
                data.disable_pause = this.disable_pause;
            }
            if (this.disable_scoresaber_submission != null) {
                data.disable_scoresaber_submission = this.disable_scoresaber_submission;
            }
            if (this.show_normal_notes_on_stream != null) {
                data.show_normal_notes_on_stream = this.show_normal_notes_on_stream;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.gameplay_parameters !== undefined)
                writer.writeMessage(1, this.gameplay_parameters, () => this.gameplay_parameters.serialize(writer));
            if (this.floating_scoreboard !== undefined)
                writer.writeBool(3, this.floating_scoreboard);
            if (this.stream_sync !== undefined)
                writer.writeBool(4, this.stream_sync);
            if (this.disable_fail !== undefined)
                writer.writeBool(5, this.disable_fail);
            if (this.disable_pause !== undefined)
                writer.writeBool(6, this.disable_pause);
            if (this.disable_scoresaber_submission !== undefined)
                writer.writeBool(7, this.disable_scoresaber_submission);
            if (this.show_normal_notes_on_stream !== undefined)
                writer.writeBool(8, this.show_normal_notes_on_stream);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlaySong {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlaySong();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.gameplay_parameters, () => message.gameplay_parameters = dependency_2.Models.GameplayParameters.deserialize(reader));
                        break;
                    case 3:
                        message.floating_scoreboard = reader.readBool();
                        break;
                    case 4:
                        message.stream_sync = reader.readBool();
                        break;
                    case 5:
                        message.disable_fail = reader.readBool();
                        break;
                    case 6:
                        message.disable_pause = reader.readBool();
                        break;
                    case 7:
                        message.disable_scoresaber_submission = reader.readBool();
                        break;
                    case 8:
                        message.show_normal_notes_on_stream = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PlaySong {
            return PlaySong.deserialize(bytes);
        }
    }
    export class SubmitScore extends pb_1.Message {
        constructor(data?: any[] | {
            score?: dependency_2.Models.Score;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("score" in data && data.score != undefined) {
                    this.score = data.score;
                }
            }
        }
        get score() {
            return pb_1.Message.getWrapperField(this, dependency_2.Models.Score, 1) as dependency_2.Models.Score;
        }
        set score(value: dependency_2.Models.Score) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            score?: ReturnType<typeof dependency_2.Models.Score.prototype.toObject>;
        }) {
            const message = new SubmitScore({});
            if (data.score != null) {
                message.score = dependency_2.Models.Score.fromObject(data.score);
            }
            return message;
        }
        toObject() {
            const data: {
                score?: ReturnType<typeof dependency_2.Models.Score.prototype.toObject>;
            } = {};
            if (this.score != null) {
                data.score = this.score.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.score !== undefined)
                writer.writeMessage(1, this.score, () => this.score.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubmitScore {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SubmitScore();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.score, () => message.score = dependency_2.Models.Score.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SubmitScore {
            return SubmitScore.deserialize(bytes);
        }
    }
    export class SongFinished extends pb_1.Message {
        constructor(data?: any[] | {
            player?: dependency_2.Models.Player;
            beatmap?: dependency_2.Models.Beatmap;
            type?: SongFinished.CompletionType;
            score?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("player" in data && data.player != undefined) {
                    this.player = data.player;
                }
                if ("beatmap" in data && data.beatmap != undefined) {
                    this.beatmap = data.beatmap;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("score" in data && data.score != undefined) {
                    this.score = data.score;
                }
            }
        }
        get player() {
            return pb_1.Message.getWrapperField(this, dependency_2.Models.Player, 1) as dependency_2.Models.Player;
        }
        set player(value: dependency_2.Models.Player) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get beatmap() {
            return pb_1.Message.getWrapperField(this, dependency_2.Models.Beatmap, 2) as dependency_2.Models.Beatmap;
        }
        set beatmap(value: dependency_2.Models.Beatmap) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get type() {
            return pb_1.Message.getField(this, 3) as SongFinished.CompletionType;
        }
        set type(value: SongFinished.CompletionType) {
            pb_1.Message.setField(this, 3, value);
        }
        get score() {
            return pb_1.Message.getField(this, 4) as number;
        }
        set score(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            player?: ReturnType<typeof dependency_2.Models.Player.prototype.toObject>;
            beatmap?: ReturnType<typeof dependency_2.Models.Beatmap.prototype.toObject>;
            type?: SongFinished.CompletionType;
            score?: number;
        }) {
            const message = new SongFinished({});
            if (data.player != null) {
                message.player = dependency_2.Models.Player.fromObject(data.player);
            }
            if (data.beatmap != null) {
                message.beatmap = dependency_2.Models.Beatmap.fromObject(data.beatmap);
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.score != null) {
                message.score = data.score;
            }
            return message;
        }
        toObject() {
            const data: {
                player?: ReturnType<typeof dependency_2.Models.Player.prototype.toObject>;
                beatmap?: ReturnType<typeof dependency_2.Models.Beatmap.prototype.toObject>;
                type?: SongFinished.CompletionType;
                score?: number;
            } = {};
            if (this.player != null) {
                data.player = this.player.toObject();
            }
            if (this.beatmap != null) {
                data.beatmap = this.beatmap.toObject();
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.score != null) {
                data.score = this.score;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.player !== undefined)
                writer.writeMessage(1, this.player, () => this.player.serialize(writer));
            if (this.beatmap !== undefined)
                writer.writeMessage(2, this.beatmap, () => this.beatmap.serialize(writer));
            if (this.type !== undefined)
                writer.writeEnum(3, this.type);
            if (this.score !== undefined)
                writer.writeInt32(4, this.score);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SongFinished {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SongFinished();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.player, () => message.player = dependency_2.Models.Player.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.beatmap, () => message.beatmap = dependency_2.Models.Beatmap.deserialize(reader));
                        break;
                    case 3:
                        message.type = reader.readEnum();
                        break;
                    case 4:
                        message.score = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SongFinished {
            return SongFinished.deserialize(bytes);
        }
    }
    export namespace SongFinished {
        export enum CompletionType {
            Passed = 0,
            Failed = 1,
            Quit = 2
        }
    }
    export class SendBotMessage extends pb_1.Message {
        constructor(data?: any[] | {
            channel?: dependency_1.proto.discord.Channel;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("channel" in data && data.channel != undefined) {
                    this.channel = data.channel;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get channel() {
            return pb_1.Message.getWrapperField(this, dependency_1.proto.discord.Channel, 1) as dependency_1.proto.discord.Channel;
        }
        set channel(value: dependency_1.proto.discord.Channel) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            channel?: ReturnType<typeof dependency_1.proto.discord.Channel.prototype.toObject>;
            message?: string;
        }) {
            const message = new SendBotMessage({});
            if (data.channel != null) {
                message.channel = dependency_1.proto.discord.Channel.fromObject(data.channel);
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                channel?: ReturnType<typeof dependency_1.proto.discord.Channel.prototype.toObject>;
                message?: string;
            } = {};
            if (this.channel != null) {
                data.channel = this.channel.toObject();
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.channel !== undefined)
                writer.writeMessage(1, this.channel, () => this.channel.serialize(writer));
            if (typeof this.message === "string" && this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendBotMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendBotMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.channel, () => message.channel = dependency_1.proto.discord.Channel.deserialize(reader));
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SendBotMessage {
            return SendBotMessage.deserialize(bytes);
        }
    }
    export class ScoreRequestResponse extends pb_1.Message {
        constructor(data?: any[] | {
            scores?: dependency_2.Models.Score[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scores" in data && data.scores != undefined) {
                    this.scores = data.scores;
                }
            }
        }
        get scores() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Models.Score, 1) as dependency_2.Models.Score[];
        }
        set scores(value: dependency_2.Models.Score[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            scores?: ReturnType<typeof dependency_2.Models.Score.prototype.toObject>[];
        }) {
            const message = new ScoreRequestResponse({});
            if (data.scores != null) {
                message.scores = data.scores.map(item => dependency_2.Models.Score.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                scores?: ReturnType<typeof dependency_2.Models.Score.prototype.toObject>[];
            } = {};
            if (this.scores != null) {
                data.scores = this.scores.map((item: dependency_2.Models.Score) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.scores !== undefined)
                writer.writeRepeatedMessage(1, this.scores, (item: dependency_2.Models.Score) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ScoreRequestResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ScoreRequestResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.scores, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.Models.Score.deserialize(reader), dependency_2.Models.Score));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ScoreRequestResponse {
            return ScoreRequestResponse.deserialize(bytes);
        }
    }
    export class ScoreRequest extends pb_1.Message {
        constructor(data?: any[] | {
            event_id?: string;
            parameters?: dependency_2.Models.GameplayParameters;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("event_id" in data && data.event_id != undefined) {
                    this.event_id = data.event_id;
                }
                if ("parameters" in data && data.parameters != undefined) {
                    this.parameters = data.parameters;
                }
            }
        }
        get event_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set event_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get parameters() {
            return pb_1.Message.getWrapperField(this, dependency_2.Models.GameplayParameters, 2) as dependency_2.Models.GameplayParameters;
        }
        set parameters(value: dependency_2.Models.GameplayParameters) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        static fromObject(data: {
            event_id?: string;
            parameters?: ReturnType<typeof dependency_2.Models.GameplayParameters.prototype.toObject>;
        }) {
            const message = new ScoreRequest({});
            if (data.event_id != null) {
                message.event_id = data.event_id;
            }
            if (data.parameters != null) {
                message.parameters = dependency_2.Models.GameplayParameters.fromObject(data.parameters);
            }
            return message;
        }
        toObject() {
            const data: {
                event_id?: string;
                parameters?: ReturnType<typeof dependency_2.Models.GameplayParameters.prototype.toObject>;
            } = {};
            if (this.event_id != null) {
                data.event_id = this.event_id;
            }
            if (this.parameters != null) {
                data.parameters = this.parameters.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.event_id === "string" && this.event_id.length)
                writer.writeString(1, this.event_id);
            if (this.parameters !== undefined)
                writer.writeMessage(2, this.parameters, () => this.parameters.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ScoreRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ScoreRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.event_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.parameters, () => message.parameters = dependency_2.Models.GameplayParameters.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ScoreRequest {
            return ScoreRequest.deserialize(bytes);
        }
    }
    export class Packet extends pb_1.Message {
        constructor(data?: any[] | ({
            id?: string;
            from?: string;
        } & (({
            acknowledgement?: Acknowledgement;
            command?: never;
            connect?: never;
            response?: never;
            connect_response?: never;
            file?: never;
            loaded_song?: never;
            event?: never;
            load_song?: never;
            play_song?: never;
            submit_score?: never;
            song_finished?: never;
            send_bot_message?: never;
            score_request_response?: never;
            score_request?: never;
            forwarding_packet?: never;
            message?: never;
            message_response?: never;
        } | {
            acknowledgement?: never;
            command?: Command;
            connect?: never;
            response?: never;
            connect_response?: never;
            file?: never;
            loaded_song?: never;
            event?: never;
            load_song?: never;
            play_song?: never;
            submit_score?: never;
            song_finished?: never;
            send_bot_message?: never;
            score_request_response?: never;
            score_request?: never;
            forwarding_packet?: never;
            message?: never;
            message_response?: never;
        } | {
            acknowledgement?: never;
            command?: never;
            connect?: Connect;
            response?: never;
            connect_response?: never;
            file?: never;
            loaded_song?: never;
            event?: never;
            load_song?: never;
            play_song?: never;
            submit_score?: never;
            song_finished?: never;
            send_bot_message?: never;
            score_request_response?: never;
            score_request?: never;
            forwarding_packet?: never;
            message?: never;
            message_response?: never;
        } | {
            acknowledgement?: never;
            command?: never;
            connect?: never;
            response?: Response;
            connect_response?: never;
            file?: never;
            loaded_song?: never;
            event?: never;
            load_song?: never;
            play_song?: never;
            submit_score?: never;
            song_finished?: never;
            send_bot_message?: never;
            score_request_response?: never;
            score_request?: never;
            forwarding_packet?: never;
            message?: never;
            message_response?: never;
        } | {
            acknowledgement?: never;
            command?: never;
            connect?: never;
            response?: never;
            connect_response?: ConnectResponse;
            file?: never;
            loaded_song?: never;
            event?: never;
            load_song?: never;
            play_song?: never;
            submit_score?: never;
            song_finished?: never;
            send_bot_message?: never;
            score_request_response?: never;
            score_request?: never;
            forwarding_packet?: never;
            message?: never;
            message_response?: never;
        } | {
            acknowledgement?: never;
            command?: never;
            connect?: never;
            response?: never;
            connect_response?: never;
            file?: File;
            loaded_song?: never;
            event?: never;
            load_song?: never;
            play_song?: never;
            submit_score?: never;
            song_finished?: never;
            send_bot_message?: never;
            score_request_response?: never;
            score_request?: never;
            forwarding_packet?: never;
            message?: never;
            message_response?: never;
        } | {
            acknowledgement?: never;
            command?: never;
            connect?: never;
            response?: never;
            connect_response?: never;
            file?: never;
            loaded_song?: LoadedSong;
            event?: never;
            load_song?: never;
            play_song?: never;
            submit_score?: never;
            song_finished?: never;
            send_bot_message?: never;
            score_request_response?: never;
            score_request?: never;
            forwarding_packet?: never;
            message?: never;
            message_response?: never;
        } | {
            acknowledgement?: never;
            command?: never;
            connect?: never;
            response?: never;
            connect_response?: never;
            file?: never;
            loaded_song?: never;
            event?: Event;
            load_song?: never;
            play_song?: never;
            submit_score?: never;
            song_finished?: never;
            send_bot_message?: never;
            score_request_response?: never;
            score_request?: never;
            forwarding_packet?: never;
            message?: never;
            message_response?: never;
        } | {
            acknowledgement?: never;
            command?: never;
            connect?: never;
            response?: never;
            connect_response?: never;
            file?: never;
            loaded_song?: never;
            event?: never;
            load_song?: LoadSong;
            play_song?: never;
            submit_score?: never;
            song_finished?: never;
            send_bot_message?: never;
            score_request_response?: never;
            score_request?: never;
            forwarding_packet?: never;
            message?: never;
            message_response?: never;
        } | {
            acknowledgement?: never;
            command?: never;
            connect?: never;
            response?: never;
            connect_response?: never;
            file?: never;
            loaded_song?: never;
            event?: never;
            load_song?: never;
            play_song?: PlaySong;
            submit_score?: never;
            song_finished?: never;
            send_bot_message?: never;
            score_request_response?: never;
            score_request?: never;
            forwarding_packet?: never;
            message?: never;
            message_response?: never;
        } | {
            acknowledgement?: never;
            command?: never;
            connect?: never;
            response?: never;
            connect_response?: never;
            file?: never;
            loaded_song?: never;
            event?: never;
            load_song?: never;
            play_song?: never;
            submit_score?: SubmitScore;
            song_finished?: never;
            send_bot_message?: never;
            score_request_response?: never;
            score_request?: never;
            forwarding_packet?: never;
            message?: never;
            message_response?: never;
        } | {
            acknowledgement?: never;
            command?: never;
            connect?: never;
            response?: never;
            connect_response?: never;
            file?: never;
            loaded_song?: never;
            event?: never;
            load_song?: never;
            play_song?: never;
            submit_score?: never;
            song_finished?: SongFinished;
            send_bot_message?: never;
            score_request_response?: never;
            score_request?: never;
            forwarding_packet?: never;
            message?: never;
            message_response?: never;
        } | {
            acknowledgement?: never;
            command?: never;
            connect?: never;
            response?: never;
            connect_response?: never;
            file?: never;
            loaded_song?: never;
            event?: never;
            load_song?: never;
            play_song?: never;
            submit_score?: never;
            song_finished?: never;
            send_bot_message?: SendBotMessage;
            score_request_response?: never;
            score_request?: never;
            forwarding_packet?: never;
            message?: never;
            message_response?: never;
        } | {
            acknowledgement?: never;
            command?: never;
            connect?: never;
            response?: never;
            connect_response?: never;
            file?: never;
            loaded_song?: never;
            event?: never;
            load_song?: never;
            play_song?: never;
            submit_score?: never;
            song_finished?: never;
            send_bot_message?: never;
            score_request_response?: ScoreRequestResponse;
            score_request?: never;
            forwarding_packet?: never;
            message?: never;
            message_response?: never;
        } | {
            acknowledgement?: never;
            command?: never;
            connect?: never;
            response?: never;
            connect_response?: never;
            file?: never;
            loaded_song?: never;
            event?: never;
            load_song?: never;
            play_song?: never;
            submit_score?: never;
            song_finished?: never;
            send_bot_message?: never;
            score_request_response?: never;
            score_request?: ScoreRequest;
            forwarding_packet?: never;
            message?: never;
            message_response?: never;
        } | {
            acknowledgement?: never;
            command?: never;
            connect?: never;
            response?: never;
            connect_response?: never;
            file?: never;
            loaded_song?: never;
            event?: never;
            load_song?: never;
            play_song?: never;
            submit_score?: never;
            song_finished?: never;
            send_bot_message?: never;
            score_request_response?: never;
            score_request?: never;
            forwarding_packet?: ForwardingPacket;
            message?: never;
            message_response?: never;
        } | {
            acknowledgement?: never;
            command?: never;
            connect?: never;
            response?: never;
            connect_response?: never;
            file?: never;
            loaded_song?: never;
            event?: never;
            load_song?: never;
            play_song?: never;
            submit_score?: never;
            song_finished?: never;
            send_bot_message?: never;
            score_request_response?: never;
            score_request?: never;
            forwarding_packet?: never;
            message?: Message;
            message_response?: never;
        } | {
            acknowledgement?: never;
            command?: never;
            connect?: never;
            response?: never;
            connect_response?: never;
            file?: never;
            loaded_song?: never;
            event?: never;
            load_song?: never;
            play_song?: never;
            submit_score?: never;
            song_finished?: never;
            send_bot_message?: never;
            score_request_response?: never;
            score_request?: never;
            forwarding_packet?: never;
            message?: never;
            message_response?: MessageResponse;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], [[3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]]);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("from" in data && data.from != undefined) {
                    this.from = data.from;
                }
                if ("acknowledgement" in data && data.acknowledgement != undefined) {
                    this.acknowledgement = data.acknowledgement;
                }
                if ("command" in data && data.command != undefined) {
                    this.command = data.command;
                }
                if ("connect" in data && data.connect != undefined) {
                    this.connect = data.connect;
                }
                if ("response" in data && data.response != undefined) {
                    this.response = data.response;
                }
                if ("connect_response" in data && data.connect_response != undefined) {
                    this.connect_response = data.connect_response;
                }
                if ("file" in data && data.file != undefined) {
                    this.file = data.file;
                }
                if ("loaded_song" in data && data.loaded_song != undefined) {
                    this.loaded_song = data.loaded_song;
                }
                if ("event" in data && data.event != undefined) {
                    this.event = data.event;
                }
                if ("load_song" in data && data.load_song != undefined) {
                    this.load_song = data.load_song;
                }
                if ("play_song" in data && data.play_song != undefined) {
                    this.play_song = data.play_song;
                }
                if ("submit_score" in data && data.submit_score != undefined) {
                    this.submit_score = data.submit_score;
                }
                if ("song_finished" in data && data.song_finished != undefined) {
                    this.song_finished = data.song_finished;
                }
                if ("send_bot_message" in data && data.send_bot_message != undefined) {
                    this.send_bot_message = data.send_bot_message;
                }
                if ("score_request_response" in data && data.score_request_response != undefined) {
                    this.score_request_response = data.score_request_response;
                }
                if ("score_request" in data && data.score_request != undefined) {
                    this.score_request = data.score_request;
                }
                if ("forwarding_packet" in data && data.forwarding_packet != undefined) {
                    this.forwarding_packet = data.forwarding_packet;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("message_response" in data && data.message_response != undefined) {
                    this.message_response = data.message_response;
                }
            }
        }
        get id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get from() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set from(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get acknowledgement() {
            return pb_1.Message.getWrapperField(this, Acknowledgement, 3) as Acknowledgement;
        }
        set acknowledgement(value: Acknowledgement) {
            pb_1.Message.setOneofWrapperField(this, 3, [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], value);
        }
        get command() {
            return pb_1.Message.getWrapperField(this, Command, 4) as Command;
        }
        set command(value: Command) {
            pb_1.Message.setOneofWrapperField(this, 4, [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], value);
        }
        get connect() {
            return pb_1.Message.getWrapperField(this, Connect, 5) as Connect;
        }
        set connect(value: Connect) {
            pb_1.Message.setOneofWrapperField(this, 5, [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], value);
        }
        get response() {
            return pb_1.Message.getWrapperField(this, Response, 6) as Response;
        }
        set response(value: Response) {
            pb_1.Message.setOneofWrapperField(this, 6, [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], value);
        }
        get connect_response() {
            return pb_1.Message.getWrapperField(this, ConnectResponse, 7) as ConnectResponse;
        }
        set connect_response(value: ConnectResponse) {
            pb_1.Message.setOneofWrapperField(this, 7, [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], value);
        }
        get file() {
            return pb_1.Message.getWrapperField(this, File, 8) as File;
        }
        set file(value: File) {
            pb_1.Message.setOneofWrapperField(this, 8, [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], value);
        }
        get loaded_song() {
            return pb_1.Message.getWrapperField(this, LoadedSong, 9) as LoadedSong;
        }
        set loaded_song(value: LoadedSong) {
            pb_1.Message.setOneofWrapperField(this, 9, [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], value);
        }
        get event() {
            return pb_1.Message.getWrapperField(this, Event, 10) as Event;
        }
        set event(value: Event) {
            pb_1.Message.setOneofWrapperField(this, 10, [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], value);
        }
        get load_song() {
            return pb_1.Message.getWrapperField(this, LoadSong, 11) as LoadSong;
        }
        set load_song(value: LoadSong) {
            pb_1.Message.setOneofWrapperField(this, 11, [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], value);
        }
        get play_song() {
            return pb_1.Message.getWrapperField(this, PlaySong, 12) as PlaySong;
        }
        set play_song(value: PlaySong) {
            pb_1.Message.setOneofWrapperField(this, 12, [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], value);
        }
        get submit_score() {
            return pb_1.Message.getWrapperField(this, SubmitScore, 13) as SubmitScore;
        }
        set submit_score(value: SubmitScore) {
            pb_1.Message.setOneofWrapperField(this, 13, [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], value);
        }
        get song_finished() {
            return pb_1.Message.getWrapperField(this, SongFinished, 14) as SongFinished;
        }
        set song_finished(value: SongFinished) {
            pb_1.Message.setOneofWrapperField(this, 14, [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], value);
        }
        get send_bot_message() {
            return pb_1.Message.getWrapperField(this, SendBotMessage, 15) as SendBotMessage;
        }
        set send_bot_message(value: SendBotMessage) {
            pb_1.Message.setOneofWrapperField(this, 15, [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], value);
        }
        get score_request_response() {
            return pb_1.Message.getWrapperField(this, ScoreRequestResponse, 16) as ScoreRequestResponse;
        }
        set score_request_response(value: ScoreRequestResponse) {
            pb_1.Message.setOneofWrapperField(this, 16, [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], value);
        }
        get score_request() {
            return pb_1.Message.getWrapperField(this, ScoreRequest, 17) as ScoreRequest;
        }
        set score_request(value: ScoreRequest) {
            pb_1.Message.setOneofWrapperField(this, 17, [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], value);
        }
        get forwarding_packet() {
            return pb_1.Message.getWrapperField(this, ForwardingPacket, 18) as ForwardingPacket;
        }
        set forwarding_packet(value: ForwardingPacket) {
            pb_1.Message.setOneofWrapperField(this, 18, [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], value);
        }
        get message() {
            return pb_1.Message.getWrapperField(this, Message, 19) as Message;
        }
        set message(value: Message) {
            pb_1.Message.setOneofWrapperField(this, 19, [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], value);
        }
        get message_response() {
            return pb_1.Message.getWrapperField(this, MessageResponse, 20) as MessageResponse;
        }
        set message_response(value: MessageResponse) {
            pb_1.Message.setOneofWrapperField(this, 20, [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], value);
        }
        get packet() {
            const cases: {
                [index: number]: "none" | "acknowledgement" | "command" | "connect" | "response" | "connect_response" | "file" | "loaded_song" | "event" | "load_song" | "play_song" | "submit_score" | "song_finished" | "send_bot_message" | "score_request_response" | "score_request" | "forwarding_packet" | "message" | "message_response";
            } = {
                0: "none",
                3: "acknowledgement",
                4: "command",
                5: "connect",
                6: "response",
                7: "connect_response",
                8: "file",
                9: "loaded_song",
                10: "event",
                11: "load_song",
                12: "play_song",
                13: "submit_score",
                14: "song_finished",
                15: "send_bot_message",
                16: "score_request_response",
                17: "score_request",
                18: "forwarding_packet",
                19: "message",
                20: "message_response"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])];
        }
        static fromObject(data: {
            id?: string;
            from?: string;
            acknowledgement?: ReturnType<typeof Acknowledgement.prototype.toObject>;
            command?: ReturnType<typeof Command.prototype.toObject>;
            connect?: ReturnType<typeof Connect.prototype.toObject>;
            response?: ReturnType<typeof Response.prototype.toObject>;
            connect_response?: ReturnType<typeof ConnectResponse.prototype.toObject>;
            file?: ReturnType<typeof File.prototype.toObject>;
            loaded_song?: ReturnType<typeof LoadedSong.prototype.toObject>;
            event?: ReturnType<typeof Event.prototype.toObject>;
            load_song?: ReturnType<typeof LoadSong.prototype.toObject>;
            play_song?: ReturnType<typeof PlaySong.prototype.toObject>;
            submit_score?: ReturnType<typeof SubmitScore.prototype.toObject>;
            song_finished?: ReturnType<typeof SongFinished.prototype.toObject>;
            send_bot_message?: ReturnType<typeof SendBotMessage.prototype.toObject>;
            score_request_response?: ReturnType<typeof ScoreRequestResponse.prototype.toObject>;
            score_request?: ReturnType<typeof ScoreRequest.prototype.toObject>;
            forwarding_packet?: ReturnType<typeof ForwardingPacket.prototype.toObject>;
            message?: ReturnType<typeof Message.prototype.toObject>;
            message_response?: ReturnType<typeof MessageResponse.prototype.toObject>;
        }) {
            const message = new Packet({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.from != null) {
                message.from = data.from;
            }
            if (data.acknowledgement != null) {
                message.acknowledgement = Acknowledgement.fromObject(data.acknowledgement);
            }
            if (data.command != null) {
                message.command = Command.fromObject(data.command);
            }
            if (data.connect != null) {
                message.connect = Connect.fromObject(data.connect);
            }
            if (data.response != null) {
                message.response = Response.fromObject(data.response);
            }
            if (data.connect_response != null) {
                message.connect_response = ConnectResponse.fromObject(data.connect_response);
            }
            if (data.file != null) {
                message.file = File.fromObject(data.file);
            }
            if (data.loaded_song != null) {
                message.loaded_song = LoadedSong.fromObject(data.loaded_song);
            }
            if (data.event != null) {
                message.event = Event.fromObject(data.event);
            }
            if (data.load_song != null) {
                message.load_song = LoadSong.fromObject(data.load_song);
            }
            if (data.play_song != null) {
                message.play_song = PlaySong.fromObject(data.play_song);
            }
            if (data.submit_score != null) {
                message.submit_score = SubmitScore.fromObject(data.submit_score);
            }
            if (data.song_finished != null) {
                message.song_finished = SongFinished.fromObject(data.song_finished);
            }
            if (data.send_bot_message != null) {
                message.send_bot_message = SendBotMessage.fromObject(data.send_bot_message);
            }
            if (data.score_request_response != null) {
                message.score_request_response = ScoreRequestResponse.fromObject(data.score_request_response);
            }
            if (data.score_request != null) {
                message.score_request = ScoreRequest.fromObject(data.score_request);
            }
            if (data.forwarding_packet != null) {
                message.forwarding_packet = ForwardingPacket.fromObject(data.forwarding_packet);
            }
            if (data.message != null) {
                message.message = Message.fromObject(data.message);
            }
            if (data.message_response != null) {
                message.message_response = MessageResponse.fromObject(data.message_response);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                from?: string;
                acknowledgement?: ReturnType<typeof Acknowledgement.prototype.toObject>;
                command?: ReturnType<typeof Command.prototype.toObject>;
                connect?: ReturnType<typeof Connect.prototype.toObject>;
                response?: ReturnType<typeof Response.prototype.toObject>;
                connect_response?: ReturnType<typeof ConnectResponse.prototype.toObject>;
                file?: ReturnType<typeof File.prototype.toObject>;
                loaded_song?: ReturnType<typeof LoadedSong.prototype.toObject>;
                event?: ReturnType<typeof Event.prototype.toObject>;
                load_song?: ReturnType<typeof LoadSong.prototype.toObject>;
                play_song?: ReturnType<typeof PlaySong.prototype.toObject>;
                submit_score?: ReturnType<typeof SubmitScore.prototype.toObject>;
                song_finished?: ReturnType<typeof SongFinished.prototype.toObject>;
                send_bot_message?: ReturnType<typeof SendBotMessage.prototype.toObject>;
                score_request_response?: ReturnType<typeof ScoreRequestResponse.prototype.toObject>;
                score_request?: ReturnType<typeof ScoreRequest.prototype.toObject>;
                forwarding_packet?: ReturnType<typeof ForwardingPacket.prototype.toObject>;
                message?: ReturnType<typeof Message.prototype.toObject>;
                message_response?: ReturnType<typeof MessageResponse.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.from != null) {
                data.from = this.from;
            }
            if (this.acknowledgement != null) {
                data.acknowledgement = this.acknowledgement.toObject();
            }
            if (this.command != null) {
                data.command = this.command.toObject();
            }
            if (this.connect != null) {
                data.connect = this.connect.toObject();
            }
            if (this.response != null) {
                data.response = this.response.toObject();
            }
            if (this.connect_response != null) {
                data.connect_response = this.connect_response.toObject();
            }
            if (this.file != null) {
                data.file = this.file.toObject();
            }
            if (this.loaded_song != null) {
                data.loaded_song = this.loaded_song.toObject();
            }
            if (this.event != null) {
                data.event = this.event.toObject();
            }
            if (this.load_song != null) {
                data.load_song = this.load_song.toObject();
            }
            if (this.play_song != null) {
                data.play_song = this.play_song.toObject();
            }
            if (this.submit_score != null) {
                data.submit_score = this.submit_score.toObject();
            }
            if (this.song_finished != null) {
                data.song_finished = this.song_finished.toObject();
            }
            if (this.send_bot_message != null) {
                data.send_bot_message = this.send_bot_message.toObject();
            }
            if (this.score_request_response != null) {
                data.score_request_response = this.score_request_response.toObject();
            }
            if (this.score_request != null) {
                data.score_request = this.score_request.toObject();
            }
            if (this.forwarding_packet != null) {
                data.forwarding_packet = this.forwarding_packet.toObject();
            }
            if (this.message != null) {
                data.message = this.message.toObject();
            }
            if (this.message_response != null) {
                data.message_response = this.message_response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.id === "string" && this.id.length)
                writer.writeString(1, this.id);
            if (typeof this.from === "string" && this.from.length)
                writer.writeString(2, this.from);
            if (this.acknowledgement !== undefined)
                writer.writeMessage(3, this.acknowledgement, () => this.acknowledgement.serialize(writer));
            if (this.command !== undefined)
                writer.writeMessage(4, this.command, () => this.command.serialize(writer));
            if (this.connect !== undefined)
                writer.writeMessage(5, this.connect, () => this.connect.serialize(writer));
            if (this.response !== undefined)
                writer.writeMessage(6, this.response, () => this.response.serialize(writer));
            if (this.connect_response !== undefined)
                writer.writeMessage(7, this.connect_response, () => this.connect_response.serialize(writer));
            if (this.file !== undefined)
                writer.writeMessage(8, this.file, () => this.file.serialize(writer));
            if (this.loaded_song !== undefined)
                writer.writeMessage(9, this.loaded_song, () => this.loaded_song.serialize(writer));
            if (this.event !== undefined)
                writer.writeMessage(10, this.event, () => this.event.serialize(writer));
            if (this.load_song !== undefined)
                writer.writeMessage(11, this.load_song, () => this.load_song.serialize(writer));
            if (this.play_song !== undefined)
                writer.writeMessage(12, this.play_song, () => this.play_song.serialize(writer));
            if (this.submit_score !== undefined)
                writer.writeMessage(13, this.submit_score, () => this.submit_score.serialize(writer));
            if (this.song_finished !== undefined)
                writer.writeMessage(14, this.song_finished, () => this.song_finished.serialize(writer));
            if (this.send_bot_message !== undefined)
                writer.writeMessage(15, this.send_bot_message, () => this.send_bot_message.serialize(writer));
            if (this.score_request_response !== undefined)
                writer.writeMessage(16, this.score_request_response, () => this.score_request_response.serialize(writer));
            if (this.score_request !== undefined)
                writer.writeMessage(17, this.score_request, () => this.score_request.serialize(writer));
            if (this.forwarding_packet !== undefined)
                writer.writeMessage(18, this.forwarding_packet, () => this.forwarding_packet.serialize(writer));
            if (this.message !== undefined)
                writer.writeMessage(19, this.message, () => this.message.serialize(writer));
            if (this.message_response !== undefined)
                writer.writeMessage(20, this.message_response, () => this.message_response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Packet {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Packet();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.from = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.acknowledgement, () => message.acknowledgement = Acknowledgement.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.command, () => message.command = Command.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.connect, () => message.connect = Connect.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.response, () => message.response = Response.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.connect_response, () => message.connect_response = ConnectResponse.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.file, () => message.file = File.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.loaded_song, () => message.loaded_song = LoadedSong.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.event, () => message.event = Event.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.load_song, () => message.load_song = LoadSong.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.play_song, () => message.play_song = PlaySong.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.submit_score, () => message.submit_score = SubmitScore.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.song_finished, () => message.song_finished = SongFinished.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.send_bot_message, () => message.send_bot_message = SendBotMessage.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.score_request_response, () => message.score_request_response = ScoreRequestResponse.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.score_request, () => message.score_request = ScoreRequest.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.forwarding_packet, () => message.forwarding_packet = ForwardingPacket.deserialize(reader));
                        break;
                    case 19:
                        reader.readMessage(message.message, () => message.message = Message.deserialize(reader));
                        break;
                    case 20:
                        reader.readMessage(message.message_response, () => message.message_response = MessageResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Packet {
            return Packet.deserialize(bytes);
        }
    }
    export class ForwardingPacket extends pb_1.Message {
        constructor(data?: any[] | {
            forward_to?: string[];
            packet?: Packet;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("forward_to" in data && data.forward_to != undefined) {
                    this.forward_to = data.forward_to;
                }
                if ("packet" in data && data.packet != undefined) {
                    this.packet = data.packet;
                }
            }
        }
        get forward_to() {
            return pb_1.Message.getField(this, 1) as string[];
        }
        set forward_to(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get packet() {
            return pb_1.Message.getWrapperField(this, Packet, 2) as Packet;
        }
        set packet(value: Packet) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        static fromObject(data: {
            forward_to?: string[];
            packet?: ReturnType<typeof Packet.prototype.toObject>;
        }) {
            const message = new ForwardingPacket({});
            if (data.forward_to != null) {
                message.forward_to = data.forward_to;
            }
            if (data.packet != null) {
                message.packet = Packet.fromObject(data.packet);
            }
            return message;
        }
        toObject() {
            const data: {
                forward_to?: string[];
                packet?: ReturnType<typeof Packet.prototype.toObject>;
            } = {};
            if (this.forward_to != null) {
                data.forward_to = this.forward_to;
            }
            if (this.packet != null) {
                data.packet = this.packet.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.forward_to !== undefined)
                writer.writeRepeatedString(1, this.forward_to);
            if (this.packet !== undefined)
                writer.writeMessage(2, this.packet, () => this.packet.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ForwardingPacket {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ForwardingPacket();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        reader.readMessage(message.packet, () => message.packet = Packet.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ForwardingPacket {
            return ForwardingPacket.deserialize(bytes);
        }
    }
    export class Message extends pb_1.Message {
        constructor(data?: any[] | {
            id?: string;
            message_title?: string;
            message_text?: string;
            can_close?: boolean;
            option_1?: dependency_2.Models.MessageOption;
            option_2?: dependency_2.Models.MessageOption;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("message_title" in data && data.message_title != undefined) {
                    this.message_title = data.message_title;
                }
                if ("message_text" in data && data.message_text != undefined) {
                    this.message_text = data.message_text;
                }
                if ("can_close" in data && data.can_close != undefined) {
                    this.can_close = data.can_close;
                }
                if ("option_1" in data && data.option_1 != undefined) {
                    this.option_1 = data.option_1;
                }
                if ("option_2" in data && data.option_2 != undefined) {
                    this.option_2 = data.option_2;
                }
            }
        }
        get id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get message_title() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set message_title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get message_text() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set message_text(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get can_close() {
            return pb_1.Message.getField(this, 4) as boolean;
        }
        set can_close(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get option_1() {
            return pb_1.Message.getWrapperField(this, dependency_2.Models.MessageOption, 5) as dependency_2.Models.MessageOption;
        }
        set option_1(value: dependency_2.Models.MessageOption) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get option_2() {
            return pb_1.Message.getWrapperField(this, dependency_2.Models.MessageOption, 6) as dependency_2.Models.MessageOption;
        }
        set option_2(value: dependency_2.Models.MessageOption) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        static fromObject(data: {
            id?: string;
            message_title?: string;
            message_text?: string;
            can_close?: boolean;
            option_1?: ReturnType<typeof dependency_2.Models.MessageOption.prototype.toObject>;
            option_2?: ReturnType<typeof dependency_2.Models.MessageOption.prototype.toObject>;
        }) {
            const message = new Message({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.message_title != null) {
                message.message_title = data.message_title;
            }
            if (data.message_text != null) {
                message.message_text = data.message_text;
            }
            if (data.can_close != null) {
                message.can_close = data.can_close;
            }
            if (data.option_1 != null) {
                message.option_1 = dependency_2.Models.MessageOption.fromObject(data.option_1);
            }
            if (data.option_2 != null) {
                message.option_2 = dependency_2.Models.MessageOption.fromObject(data.option_2);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                message_title?: string;
                message_text?: string;
                can_close?: boolean;
                option_1?: ReturnType<typeof dependency_2.Models.MessageOption.prototype.toObject>;
                option_2?: ReturnType<typeof dependency_2.Models.MessageOption.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.message_title != null) {
                data.message_title = this.message_title;
            }
            if (this.message_text != null) {
                data.message_text = this.message_text;
            }
            if (this.can_close != null) {
                data.can_close = this.can_close;
            }
            if (this.option_1 != null) {
                data.option_1 = this.option_1.toObject();
            }
            if (this.option_2 != null) {
                data.option_2 = this.option_2.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.id === "string" && this.id.length)
                writer.writeString(1, this.id);
            if (typeof this.message_title === "string" && this.message_title.length)
                writer.writeString(2, this.message_title);
            if (typeof this.message_text === "string" && this.message_text.length)
                writer.writeString(3, this.message_text);
            if (this.can_close !== undefined)
                writer.writeBool(4, this.can_close);
            if (this.option_1 !== undefined)
                writer.writeMessage(5, this.option_1, () => this.option_1.serialize(writer));
            if (this.option_2 !== undefined)
                writer.writeMessage(6, this.option_2, () => this.option_2.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Message {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.message_title = reader.readString();
                        break;
                    case 3:
                        message.message_text = reader.readString();
                        break;
                    case 4:
                        message.can_close = reader.readBool();
                        break;
                    case 5:
                        reader.readMessage(message.option_1, () => message.option_1 = dependency_2.Models.MessageOption.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.option_2, () => message.option_2 = dependency_2.Models.MessageOption.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Message {
            return Message.deserialize(bytes);
        }
    }
    export class MessageResponse extends pb_1.Message {
        constructor(data?: any[] | {
            packet_id?: string;
            value?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("packet_id" in data && data.packet_id != undefined) {
                    this.packet_id = data.packet_id;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get packet_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set packet_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set value(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            packet_id?: string;
            value?: string;
        }) {
            const message = new MessageResponse({});
            if (data.packet_id != null) {
                message.packet_id = data.packet_id;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                packet_id?: string;
                value?: string;
            } = {};
            if (this.packet_id != null) {
                data.packet_id = this.packet_id;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.packet_id === "string" && this.packet_id.length)
                writer.writeString(1, this.packet_id);
            if (typeof this.value === "string" && this.value.length)
                writer.writeString(2, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.packet_id = reader.readString();
                        break;
                    case 2:
                        message.value = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageResponse {
            return MessageResponse.deserialize(bytes);
        }
    }
}
